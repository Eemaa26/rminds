length(o[-abs(as.numeric(o$delta))>100000,]$oid)
length(o[-(abs(as.numeric(o$delta))>100000,)])
length(o[-(abs(as.numeric(o$delta))>100000),])
length(o[-(abs(as.numeric(o$delta))>100000),]$oid)
length(o$oid)
?split
df
df[3,]
rm(df[3,])
?remove
?drop
?shrink
?splice
?squeeze
o[abs(as.numeric(o$delta))>10000,]
o$delta[abs(as.numeric(o$delta))>10000,]
o$delta[abs(as.numeric(o$delta))>10000]
length(o$delta[abs(as.numeric(o$delta))>10000])
length(o$delta[abs(as.numeric(o$delta))>1000])
length(o$delta[abs(as.numeric(o$delta))>100])
length(o$delta[abs(as.numeric(o$delta))>1000])
length(o$delta[abs(as.numeric(o$delta))>2000])
length(o$delta[abs(as.numeric(o$delta))>3000])
length(o$delta[abs(as.numeric(o$delta))>4000])
length(o$delta[abs(as.numeric(o$delta))>5000])
?cut
o.cut <- cut(o$delta,c(-10000,-50000,-20000,-10000,0,1000,2000,3000,4000,5000,6000,7000,8000,9000,10000,15000,20000,50000,100000))
c(-100,-50,-20,-10,0,1:10,15,20,50,100)
c(-100,-50,-20,-10,0,1:10,15,20,50,100)*1000
c(-100,-50,-20,-10,0,1:10,15,20,50,100)*1000+.5
o.cut1 <- cut(o$delta,c(-100,-50,-20,-10,0,1:10,15,20,50,100)*1000+.5))
o.cut1 <- cut(o$delta,c(-100,-50,-20,-10,0,1:10,15,20,50,100)*1000+.5)
o.cut1
?table
table(o.cut1)
o.cut1 <- cut(o$delta,c(-100,-50,-20,-10,0,1:10,15,20,50,100)*1000)
table(o.cut1)
c(c(1,2),3)
Inf
-Inf
-Inf*2
o.cut1 <- cut(o$delta,c(-Inf,c(-100,-50,-20,-10,0,1:10,15,20,50,100)*1000,Inf))
table(o.cut1)
o[o$delta<-5e5]
o[o$delta<-5e5,]
o[o$delta<(-5e5),]
o$delta[1:10]
rm(list=ls())
con <- odbcConnect("sandy")
odbcTables(con)
search
search()
?odbcTables
odbcTables(con)
ls()
pwd()
ls()
?load
load(".RData")
ls()
library(RODBC)
chan <- odbcConnect("mit_reality")
z <- sqlFetch(chan,"callspan")
length(z)
names(z)
library(reshape)
library(reshape)
?butler
?mvbutils
?distributions
?reshape
?by
vignette("reshape")
z$delta <- z$endtime - z$starttime
length(z$delta)
?aggregate
?by
?split
split(1:10,1:2)
max(z$delta)
hist(z$delta)
z[z$delta>10000,]
length(z[z$delta>10000,])
length(z[z$delta>10000,]$delta)
length(z[z$delta>10000,1:10])
z[z$delta>10000,1:10]
z[z$delta>10000,][1:10]
z[z$delta>100000,]
z[z$delta>100000,1:5]
z[z$delta>100000,"delta"]
z[z$delta>100000,"delta"][1:10]
z[z$delta>100000,c("person_oid","delta")][1:10]
z[z$delta>100000,c("person_oid","delta")]
z[z$delta>100000,c("person_oid","delta")][1:100]
z[z$delta>100000,c("person_oid","delta")][1:10]
z[z$delta>100000,c("person_oid","delta")][,1:10]
z[z$delta>100000,c("person_oid","delta")]
z[z$delta>50000,c("person_oid","delta")]
names(z)
z[z$delta>50000,c("person_oid","delta","number")]
z[z$delta>50000,c("person_oid","delta","phonenumber_oid")]
z[z$delta>20000,c("person_oid","delta","phonenumber_oid")]
z[z$delta>20000,c("person_oid","delta","phonenumber_oid")][1:10,]
?apply
names(zp)
zp <- split(z,z$person_oid)
names(zp)
names(zp[[1]])
names(zp[1])
length(zp[[1]]$endtime)
length(zp[[2]]$endtime)
length(p[[2]]$endtime)
length(p[[1]]$endtime)
p[[2]]$endtime
zp[[2]]$endtime[1:10]
p[[2]]$endtime[1:10]
zp[[2]]$endtime[1:100]
zp[[3]]$endtime[1:100]
zp[[3]]$endtime[1:10]
p[[3]]$endtime[1:10]
h[[1]] <- 3
h <- list()
h[[1]] <- 3
h[[3]] <- 5
h
length(h)
h[["a"]] <- 5
h
h[[5]] <- 5
h
names(h)
h[[4]]
h[[4]] <- 8
h
zp[[1]]$starttime[1]
zp[[1]]$starttime[1:5]
zp[[1]]$starttime[1:4]
zp[[1]]$starttime[1:3]
zp[[1]]$endtime[1:3]
p[[1]]$endtime[1:3]
zpp1.s <- zp[[1]]$starttime[zp[[1]]$starttime>=p[[1]]$starttime[1] & zp[[1]]$endtime<=p[[1]]$endtime]
zpp1.s <- zp[[1]]$starttime[zp[[1]]$starttime>=p[[1]]$starttime[1] & zp[[1]]$endtime<=p[[1]]$endtime[1]]
length(zpp1.s)
in.range <- function(ap,cp,p,a) cp[[p]]$starttime[cp[[p]]$starttime>=ap[[p]]$starttime[a] & cp[[p]]$endtime<=p[[p]]$endtime[a]]
in.range.pa <- in.range
in.range.pa
?seq
x <- 1:10
seq_along(x)
ap <- rbind(seq(1,20,by=4))
ap
ap <- cbind(seq(1,20,by=4))
ap
ap <- cbind(seq(10,100,by=10))
ap
ap <- data.frame(start=cbind(seq(10,100,by=10)),end=cbind(15,105,by=10))
ap <- data.frame(start=seq(10,100,by=10),end=seq(15,105,by=10))
ap
cp <- data.frame(start=seq(10,102,by=3),end=seq(12,104,by=2))
cp <- data.frame(start=seq(10,102,by=3),end=seq(12,104,by=3))
cp
in.ab <- function(cp,a,b) names(cp[cp$start>=a & cp$end<=b])
in.ab(cp,10,20)
in.ab <- function(cp,a,b) names(cp[cp$start>=a & cp$end<=b,])
in.ab(cp,10,20)
in.ab <- function(cp,a,b) cp[cp$start>=a & cp$end<=b,]
in.ab(cp,10,20)
rownames(in.ab(cp,10,20))
cp[1,]
in.ab <- function(cp,a,b) rownames(cp[cp$start>=a & cp$end<=b,])
in.ab(cp,20,30)
in.ab <- function(cp,a,b) as.numeric(rownames(cp[cp$start>=a & cp$end<=b,]))
in.ab(cp,20,30)
cp[in.ab(cp,20,30),]
cp[as.character(in.ab(cp,20,30)),]
?lapply
?tapply
?sapply
ap[3,]
ap[3,]$start
ap[3]$start
ap.in <- sapply(seq_along(ap$start),function(r) in.ab(cp,ap[r,]$start,ap[r,]$end))
ap.in
cp[31,]
cp[21:22,]
ap.in <- lapply(seq_along(ap$start),function(r) in.ab(cp,ap[r,]$start,ap[r,]$end))
ap.in
ap[3,]$end
ap$end[3]
library(plyr)
install.packages("plyr")
?install.package
?install.packages
install.packages("/s/w/r/plyr")
in.ab <- function(cp,a,b) which(cp[cp$start>=a & cp$end<=b,]) # as.numeric unnecessary -- cp[in.ab(...),] works
in.ab(cp,20,30)
in.ab <- function(cp,a,b) which(cp$start>=a & cp$end<=b)
in.ab(cp,20,30)
install.packages("/s/w/r/plyr-0.1.tgz")
install.packages(lib.loc="/s/w/r/plyr-0.1.tgz")
?install.packages
install.packages(pkgs="/s/w/r/plyr-0.1.tgz")
install.packages(repos=NULL,pkgs=c("/s/w/r/plyr-0.1.tgz"))
install.packages(repos=NULL,pkgs=c("/s/w/r/plyr.tgz"))
library(plyr)
library("plyr")
install.packages("/s/w/r/plyr.tgz",repos=NULL)
library("plyr")
library(plyr)
library(plyr-0.1)
library(plyr.git)
library(plyr)
ap
cp
in.ab
ddply
library(kohonen)
setwd('/Users/alexyk/R/wickham/5-som')
# source("~/documents/clusters/clusterfly/load.r")#
library(clusterfly)#
library(kohonen)#
#
source("../1-data/wine.r")#
#
# wgobi(wine)#
vars <- c("dilution", "alcohol", "color", "proline", "flavanoids")#
w5 <- as.matrix(winer[, vars])#
#
#
# Visualising iterations -----------------------------------------------------#
#
source("~/ggobi/rggobi/r/longitudinal.r")#
right <- som_iterate(w5, grid = somgrid(10, 3), radius=c(3, 0), stepsize=1, nsteps=100)#
wgobi(right)#
#
distances <- melt(sapply(right, function(x) x$distances))#
names(distances) <- c("oid", "step", "value")#
#
ggplot(distances, aes(step, value)) + scale_y_continuous("distance from node")#
ggsave(file="som-dist-individual.pdf", width=8, height=5) #
#
right_sum <- summary(right)[, -c(7,8)]#
#
ggplot(right_sum, aes(step, dist_mean)) + geom_line(aes(y=value, group = oid), colour=alpha("grey10", 0.2), data=distances) + geom_line(colour="black") + geom_point(aes(colour = radius)) + scale_y_continuous("distance from node") + scale_colour_gradient(.breaks = 1:3)#
#
ggsave(file="som-dist.pdf", width=10, height=4) #
#
ggplot(right_sum, aes(step, dist_mean))  + geom_line(colour="black") + geom_point(aes(colour = radius)) + scale_y_continuous("distance from node") + scale_colour_gradient(.breaks = 1:3) + ylim(0.03, 0.06)#
#
ggsave(file="som-dist-mean.pdf", width=10, height=3) #
#
final <- right[[length(right)]]#
#
# m-in-ds vs d-in-ms ---------------------------------------------------------#
#
initial <- right[[1]]#
#
pdf("wine-bad-model.pdf", width = 6, height = 3)#
plot(initial)#
dev.off()#
#
wgobi(initial)
library(clusterfly)
library(clusterfly)
library(kohonen)
setwd('/Users/alexyk/R/wickham/5-som')
source("../1-data/wine.r")
setwd('/Users/alexyk/R/wickham/1-data')
library(ggplot2)#
ggopt(grid.fill = "grey95")#
#source("~/documents/reshape/reshape/load.r")#
#
wine <- read.csv("../1-data/wine.csv")#
winer <- rescaler(wine, "range")#
#
wgobi <- function(...) {#
  g <- ggobi(...)#
  glyph_colour(g[[1]]) <- c(3, 4, 5)[wine$type]  #
  invisible(g)#
}#
#
col <- scale_colour_manual("Variety", values = c("#E41A1C", "#377EB8", "#4DAF4A"))#
fill <- scale_fill_manual("Variety", values = alpha(c("#E41A1C", "#377EB8", "#4DAF4A"), 0.3))#
#
recolour <- function(g = ggobi_get()[[1]]) {#
  glyph_colour(g) <- glyph_colour(g) + 1  #
}#
winefly <- function(..., formula = type ~ color + phenols + flavanoids, n=1e5) {#
  print(classifly(wine, formula, ..., n=1e5))#
  recolour()#
}
setwd('/Users/alexyk/R/wickham/5-som')
vars <- c("dilution", "alcohol", "color", "proline", "flavanoids")#
w5 <- as.matrix(winer[, vars])#
#
#
# Visualising iterations -----------------------------------------------------#
#
#source("~/ggobi/rggobi/r/longitudinal.r")#
right <- som_iterate(w5, grid = somgrid(10, 3), radius=c(3, 0), stepsize=1, nsteps=100)#
wgobi(right)
?kohonen
?som_iterate
w5
d.music <- read.csv("http://www.ggobi.org/book/data/music-all.csv")#
#
music <- rescaler(d.music)[complete.cases(d.music), 1:10]#
music.som <- som(music[,-(1:3)], 6, 6, neigh="bubble", rlen=1000)#
ggobi(music.som)
music.som <- som(music[,-(1:3)], 6, 6, rlen=1000)
?ggobi.som
?som
?som
setwd('/Users/alexyk/R/wickham/3-classifly')
library(classifly)#
#
source("../1-data/wine.r")#
#
qplot(color, phenols, data=wine, colour=type) + col#
#
wine_lda <- classifly(winer, type ~ color + phenols, lda, n = 100 * 100, method="grid")#
grid <- subset(wine_lda, .TYPE == "simulated")#
#
ggplot(grid, aes(color, phenols)) + geom_tile(aes(fill = type), colour=NA) + geom_point(aes(colour=type), data=winer) + col + fill + coord_equal()#
ggsave(file = "class-2d-shade.pdf", width=5, height=4)#
#
ggplot(grid, aes(color, phenols, colour=type)) + geom_point(data=winer) + geom_contour(data = grid, size = 0.5) + scale_z_continuous(breaks=0.05) + col + coord_equal()#
ggsave(file = "class-2d-boundary.pdf", width=5, height=4)#
#
#
w <- rescaler(read.csv("../nnet/wiggly.csv")[, -1], "range")#
w$class <- factor(w$class)#
classifly(w, class ~ ., randomForest)#
#
winefly(lda)#
winefly(svm, probability=T, kernel="linear")#
#
f5 <- type ~ color + phenols + flavanoids + proline + dilution#
winefly(svm, probability=T, kernel="polynomial", formula = f5, n=1e6)#
#
winefly(svm, probability=T, kernel="radial")#
#
#
#
# Random forests don't give clean boundaries
setwd('/Users/alexyk/R/wickham/3-hclust')
# ggplot2 dengrograms ----------------------------------------------#
#
#
gdendro <- function(ward2) {#
  wardd <- ward2$data#
  wardd$type <- factor(c(as.character(wine$type), rep(NA, nrow(wine) - 1)))#
  vars <- c("ORDER", "POINTS", "type")#
  #
  leaves <- subset(wardd, node == 0)#
  nodes <- subset(wardd, node == 1)#
  #
  # < 0 = observation, > 0 = cluster#
  merge <- ward2$hclust$merge#
  merge[merge > 0] <- merge[merge > 0] + nrow(leaves)#
  merge[merge < 0] <- abs(merge[merge < 0])#
#
  lines <- data.frame(rbind(#
    cbind(nodes[, vars], wardd[merge[, 1], vars]),#
    cbind(nodes[, vars], wardd[merge[, 2], vars])#
  ))#
#
  ggplot(, aes(ORDER, POINTS)) + geom_point(aes(colour=type), data=leaves) + geom_point(data=nodes, size= 0.5)  + geom_segment(aes(xend=ORDER.1, yend=POINTS.1, group=1), data=lines) + scale_x_continuous("",breaks=NA) + scale_y_continuous("Number of points in cluster") + col#
}
setwd('/Users/alexyk/R/wickham/3-hclust')
library(reshape)#
library(clusterfly)#
#
source("../1-data/wine.r")#
#
#
sngl2 <- hierfly(winer[, -1], method="single")#
ward2 <- hierfly(winer[, -1], method="ward")#
#
source("dendro.r")#
gdendro(ward2)#
ggsave(file = "wine-ward.pdf", width=6, height=4)#
gdendro(sngl2)#
ggsave(file = "wine-single.pdf", width=6, height=4)
setwd('/Users/alexyk/R/wickham/3-manova')
conf.ellipse <- function(data, npoints=1000, cl=0.95, mean=colMeans(data), cov=var(data), n=nrow(data)) {#
  norm.vec  <-  function(x) x / sqrt(sum(x^2))#
#
  p <- length(mean)#
  ev <- eigen(cov)#
#
  normsamp <- matrix(rnorm(npoints*p), ncol=p)#
  sphere <- t(apply(normsamp, 1, norm.vec))#
#
  ellipse <- sphere %*% diag(sqrt(ev$values)) %*% t(ev$vectors)#
  conf.region <- ellipse * sqrt(p * (n-1) * qf(cl, p, n-p) / (n * (n-p)))#
  if (!missing(data)) colnames(conf.region) <- colnames(data)#
#
  data.frame(conf.region + rep(mean, each=npoints) )#
}
setwd('/Users/alexyk/R/wickham/3-manova')
library(MASS)#
library(ggplot2)#
#
# Example data ---------------------------------------------------------------#
#
ggopt(grid.fill = "grey95")#
#
df <- as.data.frame(rbind(#
  mvrnorm(100, mu = c(1, 1), Sigma = matrix(c(1, -0.9, -0.9, 1), nrow=2)),      #
  mvrnorm(100, mu = c(0, 0), Sigma = matrix(c(1, -0.9, -0.9, 1), nrow=2))#
))#
#
col <- scale_colour_manual("group", values = c("#AF8DC3", "#7FBF7B"))#
#
qplot(V1, V2, data=df, colour=rep(c("A","B"), each=100)) + col#
ggsave(file = "manova-example.pdf", width=5, height=4)#
#
qplot(V1, data=df, colour=rep(c("A","B"), each=100), geom="density") + col#
ggsave(file = "manova-example-m1.pdf", width=5, height=4)#
#
qplot(V2, data=df, colour=rep(c("A","B"), each=100), geom="density") + col#
ggsave(file = "manova-example-m2.pdf", width=5, height=4)#
#
# Wine data ------------------------------------------------------------------#
#
source("../1-data/wine.r")#
l(plyr)#
centre <- function(x) x - mean(x)#
#
winec <- ddply(winer, .(type), numcolwise(centre))#
wine_var <- var(winec[, -1])#
#
source("ellipse.r")#
ellipses <- ddply(winer, .(type), function(df) conf.ellipse(df[, -1], cov=wine_var, npoints=10000))#
#
data <- lattice::make.groups(regions = ellipses, data = winer)#
#
library(rggobi)#
g <- ggobi(data)#
glyph_colour(g[[1]]) <- c(3, 4, 5)[data$type]  #
glyph_type(g[[1]]) <- c(1, 6)[data$which]
setwd('/Users/alexyk/R/wickham/4-meifly')
library(meifly)
setwd('/Users/alexyk/R/wickham/4-meifly')
library(ggplot2)#
library(rggobi)#
library(meifly)#
#
y <- swiss$Fertility#
x <- swiss[, -1]#
mods <- fitall(y, x, lm)#
ggobi(mods, swiss)#
#
# Model level plots#
# ------------------------------#
#
ggopt(grid.fill = "grey95")#
#
model <- summary(mods)#
model$df <- factor(model$df)#
modelm <- melt(rescaler(model, "range"), id=c("model", "df"))#
modelm$variable <- with(modelm, reorder_factor(variable, tapply(value, variable, mean)))#
#
# Coefficient plots#
# ------------------------------#
mcoef <- coef(mods)#
#
baseline <- geom_hline(colour="grey50")#
pcp <- geom_path(aes(group=model), data=mcoef, colour="grey30")#
#
qplot(variable, raw, data=subset(mcoef, raw != 0), xlab="", ylab="Coefficient") + baseline#
ggsave(file="coef-raw.pdf", width=6, height=6)#
qplot(variable, std, data=subset(mcoef, raw != 0), xlab="", ylab="Standardised coefficient") + baseline#
ggsave(file="coef-std.pdf", width=6, height=6)#
#
# Model brushing#
# -----------------------------#
#
upag <- subset(mcoef, variable == "Agriculture" & raw > 0)$model #
#
model <- transform(model, #
  top2 = factor(AIC >= AIC[order(AIC, decreasing=TRUE) [2]]),#
  upag = factor(model %in% upag)#
)#
colour <- scale_colour_manual(values = c("black", "red"))#
size <- scale_size_manual(values = c(2, 3))#
#
qplot(df, R2, data = model, xlab="Degrees of freedom", colour=top2, size=top2, ylab=expression(R^2)) + colour + opts(legend.position="none") + size#
ggsave(file="coef-models.pdf", width=6, height=6)#
#
mcoef2 <- merge(mcoef, model[, c("model", "top2", "upag")])#
qplot(variable, std, data=subset(mcoef2, std != 0), colour=top2,ylab=expression(R^2)) + geom_line(aes(group=model, size=top2), data=mcoef2) + colour + opts(legend.position="none") +  scale_size_manual(values = c(0.3, 1.4))#
ggsave(file="coef-coefs.pdf", width=6, height=6)#
#
qplot(df, R2, data = model, xlab="Degrees of freedom", colour=upag, size=upag) + colour + opts(legend.position="none") + size#
ggsave(file="coef-models-upag.pdf", width=6, height=6)#
#
qplot(variable, std, data=subset(mcoef2, std != 0), colour=upag) + geom_line(aes(group=model, size=upag), data=mcoef2) + colour + opts(legend.position="none") +  scale_size_manual(values = c(0.3, 1.4))#
ggsave(file="coef-coefs-upag.pdf", width=6, height=6)
